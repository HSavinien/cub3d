raycasting, as we do it, naturaly include isometric 3d : the height of the wall is function of the wall distance, and nothing else. what will become tricky is puting the corect texture, well proportioned, on each wall. for this reason, we'll start with puting plain colored walls, then add texture in a second time.

the idea is to cast rays (no shit), and see where they hit something. then, we can calculate the distence between the point we hit and the player, and deduce the height of the pixel column. as such, we need to cast one ray per pixel in width (if the window is 1080*720p, we'll cast 1080 ray). 

For each ray, the idea is to advence step by step until we fine a wall. while the easiest way would be a regular increment. however, this methode mean we might miss anything situed between two jump. so we don't do that. 
instead, we jump to the next point where our ray intersect the grid : since wall are always along a grid, we are sure to match perfectly.

question :
	algo to calculate the next grid intersection
	formule to calculate the height of a wal in function of it's distance


	claculate next grid intersection : 
	since we look at a point, we got a pair of coordinate. the next point will have either x or y as an interger. just take the one closest to the next integer, and role with it;


	wall size algo : 
	parameters : distance, wall height macro, DEPTH macro, angle(to compensate fish_eye).
	the apparent size is invertly proportional to the distance (thales)
	the wall height macro give the size of the wall when the distance is 0 (true size)
	the depth macro is how fast a wall will get smalest when geting further (proportionality coef)

	the fish_eye effect is due to the fact that the edge of the wall is further than the center, and as such smaller. to correct that, we can use pythagore to calculate the distance it should be if it was at the center of screen.
